# RoostGPT vars
TEST_NAME=credential-wallet-api                                                 # Optional; Default is roost-test
LANGUAGE=java                                                                   # Optional; Default is java; Supports [java, go, python, csharp, nodejs]
TEST_FRAMEWORK=artillery                                                        # 
# HTTP_VERBS_FOR_TESTING=get,post,put,patch,delete                                # The specific http methods to be tested for all APIs.
HTTP_VERBS_FOR_TESTING=patch  # The specific http methods to be tested for all APIs.
ROOST_USER_INPUT=""                                                             # The message will be used to geneate tests.
FUNCTIONS_TO_TEST=                                                              # Tests will only be generated for these functions.
REGEX_HTTP_ENDPOINTS_FOR_TESTING=/me                                            # API Endpoint REGEX
AI_TYPE=openai                                                                  # Optional; Default is openai; Supports [openai, vertexai, azure_open_ai, open_source_ai]
PACKAGES_TO_SCAN=*                                                              # Required for LANGUAGE=java, the package to scan and generate test for example - com.demo.sample
ITERATION=0                                                                     # Optional; Default is 2
TIMEOUT=1                                                                       # Optional; Default is 1 hour
TEST_TYPE=api-spec-test                                                         # Optional; Default is unit Supports [unit, functional, artillery, artillery-api-spec, integration]

# License env vars
ROOST_DOMAIN=dev.roost.ai                                                       # Optional; Default is app.roost.ai
ROOST_TOKEN=49270d74-8afd-4d81-a952-82c5e4728b43                                # Required, the Roost token
TELEMETRY=true                                                                  # Optional; Default is true, Supports [true, false], send telemetry data to roost, no private information is shared

# GIT env vars
GIT_TYPE=local                                                                 # Default is github; Supports [github, gitlab, azure, bitbucket, local]
HOSTED_TYPE=cloud                                                               # Default is cloud; Supports [cloud, hosted]
GIT_HOSTED_URL=                                                                 # Required if HOSTED_TYPE=hosted
USE_SSH=false                                                                   # Optional; Default is false; Supports [true, false]; SSH based auth for Git
LOCAL_PROJECT_PATH=/var/tmp/RoostArt                                                             # Required if GIT_TYPE is local, Path to your workspace.
SOURCE_GIT_CLONE_URL=                                                           # Optional; the source repo clone URL
SOURCE_GIT_TOKEN=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                       # Required
SOURCE_OWNER_NAME=harishagrawal                                                 # Required
SOURCE_REPO_NAME=OpenAPI-Specification                                          # Required
SOURCE_REPO_ID=688962662                                                        # Required for GIT_TYPE=gitlab
SOURCE_PROJECT_NAME=                                                            # Required for GIT_TYPE=azure
SOURCE_PROJECT_ID=                                                              # Required for GIT_TYPE=bitbucket
SOURCE_BASE_BRANCH=main                                                         # Required
SOURCE_RELATIVE_DIRECTORY=/                                                     # Optional; the relative path of the repository
SAME_TARGET_DETAIL=true                                                         # Optional; Default true, Supports [true, false]
DESTINATION_GIT_CLONE_URL=                                                      # Optional; the destination repo clone URL
DESTINATION_GIT_TOKEN=                                                          # Required if SAME_TARGET_DETAIL=false
DESTINATION_OWNER_NAME=                                                         # Required if SAME_TARGET_DETAIL=false
DESTINATION_REPO_NAME=                                                          # Required if SAME_TARGET_DETAIL=false
DESTINATION_REPO_ID=                                                            # Required if SAME_TARGET_DETAIL=false and GIT_TYPE=gitlab
DESTINATION_PROJECT_NAME=                                                       # Required for GIT_TYPE=azure
DESTINATION_PROJECT_ID=                                                         # Required if SAME_TARGET_DETAIL=false and GIT_TYPE=bitbucket
DESTINATION_BASE_BRANCH=                                                        # Required if SAME_TARGET_DETAIL=false
MAX_DEPTH=-1                                                                    # Required

# Open AI env vars
OPENAI_API_MODEL=gpt-4                                                          # Optional; Default is gpt-4
OPENAI_API_KEY=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              # Required if AI_TYPE=openai
AI_TEMPERATURE=0.6                                                              # Required if AI_TYPE=openai; Default value is 0.6
USE_ASSISTANT=false                                                             # Optional: Use Assistant feature in openai. Default:false

# Vertex AI env vars
VERTEX_FINE_TUNE=false                                                          # Optional: Default is false, Supports [true, false]
VERTEX_PROJECT_ID=                                                              # Required if AI_TYPE=vertexai
VERTEX_REGION=us-central1                                                       # Required if AI_TYPE=vertexai and VERTEX_FINE_TUNE=true
VERTEX_BEARER_TOKEN=                                                            # Required if AI_TYPE=vertexai
VERTEX_MODEL=text-bison                                                         # Required if AI_TYPE=vertexai; Supports [text-bison, code-bison, codechat-bison]

# Azure Open AI env vars
AZURE_OPENAI_ENDPOINT=                                                          # Required if AI_TYPE=azure_open_ai
AZURE_DEPLOYMENT_NAME=                                                          # Required if AI_TYPE=azure_open_ai
AZURE_OPENAI_KEY=                                                               # Required if AI_TYPE=azure_open_ai

# Open source env vars
OPEN_SOURCE_MODEL_ENDPOINT=                                                     # Required if AI_TYPE=open_source_ai
OPEN_SOURCE_MODEL=                                                              # Optional; Supports [meta-llama/Llama-2-13b-chat, HuggingFaceH4/starchat-beta]

# Board Details
BOARD_TYPE=none                                                                 # optional default value is "none" supports "none" ,"jira" and "azure"

# Jira board env vars
JIRA_HOST_NAME=                                                                 # Required if TEST_TYPE=functional and BOARD_TYPE=jira
JIRA_EMAIL=                                                                     # Required if TEST_TYPE=functional and BOARD_TYPE=jira
JIRA_TOKEN=                                                                     # Required if TEST_TYPE=functional and BOARD_TYPE=jira
JIRA_ID=                                                                        # Optional if TEST_TYPE=functional and BOARD_TYPE=jira

# Azure board env vars
AZURE_ORG=                                                                      # Required if TEST_TYPE=functional and BOARD_TYPE=azure
AZURE_PROJECT=                                                                  # Required if TEST_TYPE=functional and BOARD_TYPE=azure
AZURE_TOKEN=                                                                    # Required if TEST_TYPE=functional and BOARD_TYPE=azure
AZURE_WORK_ITEM_ID=                                                             # Optional if TEST_TYPE=functional and BOARD_TYPE=azure

# Log env vars
LOG_SOURCE=elks                                                                 # Optional; Default is elks
LOG_SOURCE_PATH=                                                                # Optional; the log file path
LOG_ELASTICSEARCH_URL=                                                          # Optional; the Elastic search URL
LOG_ELASTICSEARCH_USER=                                                         # Optional; the Elastic search user name
LOG_ELASTICSEARCH_TOKEN=                                                        # Optional; the Elastic search token
LOG_ELASTICSEARCH_API_KEY=                                                      # Optional; the Elastic search api key

# Api Spec env vars
API_SPEC_TYPE=swagger                                                           # Optional; Supports [swagger, postman]
API_SPEC_SOURCE=file                                                            # Optional; Supports [file, gitpath, url]
API_SPEC_FILE_PATH=/Users/harishagrawal/Downloads/credentialregister-wallet-1.0.0-resolved.yaml                # Optional; path of the source file if source is file/gitpath. Relative path in case of gitpath.
API_SPEC_URL=                                                                   # Optional; URL of the source file if source is url

# Behavioral test cases env vars
BEHAVIORAL_TEST_TYPE=gherkin                                                    # Optional; Supports [gherkin]
BEHAVIORAL_TEST_SOURCE=file                                                     # Optional; Supports [file, gitpath, url]
BEHAVIORAL_TEST_FILE_PATH=                                                      # Optional; path of the source file if source is file/gitpath. Relative path in case of gitpath.
BEHAVIORAL_TEST_URL=                                                            # Optional; URL of the source file if source is url

# User environment variables
ROOST_INTERNAL=zbio                                                             # user env
